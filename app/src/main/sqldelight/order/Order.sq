import java.time.Instant;

CREATE TABLE OrderEntity(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    restaurantId INTEGER NOT NULL,
    createdAt INTEGER AS Instant NOT NULL,
    payerId INTEGER,
    attachment TEXT,
    note TEXT NOT NULL DEFAULT "",
    FOREIGN KEY (restaurantId) REFERENCES RestaurantEntity(id),
    FOREIGN KEY (payerId) REFERENCES CustomerEntity(id)
);

CREATE TABLE OrderItemEntity(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    orderId INTEGER NOT NULL,
    customerId INTEGER NOT NULL,
    quantity INTEGER NOT NULL,
    menuItemPriceId INTEGER NOT NULL,
    FOREIGN KEY (orderId) REFERENCES OrderEntity(id),
    FOREIGN KEY (menuItemPriceId) REFERENCES MenuItemPriceEntity(id),
    UNIQUE(orderId, menuItemPriceId)
);

CREATE TABLE OrderPayment(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    paymentId INTEGER NOT NULL,
    FOREIGN KEY (paymentId) REFERENCES CustomerPayment(id)
);

-- insert:
-- INSERT INTO hockeyPlayer(player_number, full_name)
-- VALUES (?, ?);

-- CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer(full_name);
--
-- INSERT INTO hockeyPlayer (player_number, full_name)
-- VALUES (15, 'Ryan Getzlaf');
--
-- selectAll:
-- SELECT *
-- FROM hockeyPlayer;
--

insert:
INSERT INTO OrderEntity(restaurantId, createdAt)
VALUES (?, ?);

selectAll:
SELECT OrderEntity.id, OrderEntity.createdAt, RestaurantEntity.name
FROM OrderEntity
JOIN RestaurantEntity ON OrderEntity.id = RestaurantEntity.id;

selectById:
SELECT OrderEntity.id, OrderEntity.createdAt, RestaurantEntity.name AS restaurant, CustomerEntity.name AS payer,
sum(MenuItemPriceEntity.price * OrderItemEntity.quantity) AS total, OrderEntity.note
FROM OrderEntity
JOIN RestaurantEntity ON OrderEntity.restaurantId = RestaurantEntity.id
LEFT JOIN CustomerEntity ON OrderEntity.payerId = CustomerEntity.id
LEFT JOIN OrderItemEntity ON OrderEntity.id = OrderItemEntity.orderId
LEFT JOIN MenuItemPriceEntity ON OrderItemEntity.menuItemPriceId = MenuItemPriceEntity.id
WHERE OrderEntity.id = ?;

insertOrderItem:
INSERT INTO OrderItemEntity(orderId, customerId, quantity, menuItemPriceId)
VALUES (?, ?, ?, ?);

