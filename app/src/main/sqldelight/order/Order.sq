import java.time.Instant;

CREATE TABLE OrderEntity(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    restaurantId INTEGER NOT NULL,
    createdAt INTEGER AS Instant NOT NULL,
    payerId INTEGER,
    attachment TEXT,
    note TEXT NOT NULL DEFAULT "",
    FOREIGN KEY (restaurantId) REFERENCES RestaurantEntity(id),
    FOREIGN KEY (payerId) REFERENCES UserEntity(id)
);

CREATE TABLE OrderItemPriceEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    orderId INTEGER NOT NULL,
    price INTEGER NOT NULL,
    menuItemId INTEGER NOT NULL,
    datetime INTEGER AS Instant NOT NULL,
    FOREIGN KEY (orderId) REFERENCES OrderEntity(id),
    FOREIGN KEY (menuItemId) REFERENCES MenuItemEntity(id),
    UNIQUE(orderId, menuItemId)
);

CREATE TABLE OrderItemEntity(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    customerId INTEGER NOT NULL,
    quantity INTEGER NOT NULL,
    orderItemPriceId INTEGER NOT NULL,
    FOREIGN KEY (customerId) REFERENCES UserEntity(id),
    FOREIGN KEY (orderItemPriceId) REFERENCES OrderItemPriceEntity(id),
    UNIQUE(customerId, orderItemPriceId)
);

CREATE TABLE OrderItemOptionsEntity(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    orderItemId INTEGER NOT NULL,
    optionId Integer NOT NULL,
    status TEXT NOT NULL,
    FOREIGN KEY (orderItemId) REFERENCES OrderItemEntity(id),
    FOREIGN KEY (optionId) REFERENCES OptionEntity(id),
    UNIQUE(orderItemId, optionId)
);

CREATE TABLE OrderPayment(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    paymentId INTEGER NOT NULL,
    FOREIGN KEY (paymentId) REFERENCES UserPayment(id)
);

insert:
INSERT INTO OrderEntity(restaurantId, createdAt)
VALUES (?, ?);

selectAll:
SELECT OrderEntity.id, OrderEntity.createdAt, RestaurantEntity.name
FROM OrderEntity
JOIN RestaurantEntity ON OrderEntity.id = RestaurantEntity.id;

selectById:
SELECT OrderEntity.id, OrderEntity.createdAt, RestaurantEntity.name AS restaurant, UserEntity.name AS payer,
sum(OrderItemPriceEntity.price * OrderItemEntity.quantity) AS total, OrderEntity.note
FROM OrderEntity
JOIN RestaurantEntity ON OrderEntity.restaurantId = RestaurantEntity.id
LEFT JOIN UserEntity ON OrderEntity.payerId = UserEntity.id
LEFT JOIN OrderItemPriceEntity ON OrderEntity.id = OrderItemPriceEntity.orderId
LEFT JOIN OrderItemEntity ON OrderItemPriceEntity.id = OrderItemEntity.orderItemPriceId
WHERE OrderEntity.id = ?;

selectAllOrderItems:
SELECT OrderItemEntity.id, OrderItemEntity.customerId, UserEntity.name , OrderItemPriceEntity.price, OrderItemEntity.quantity,
(OrderItemPriceEntity.price * OrderItemEntity.quantity) AS total
FROM OrderItemEntity
JOIN UserEntity ON OrderItemEntity.customerId = UserEntity.id
JOIN OrderItemPriceEntity ON OrderItemEntity.orderItemPriceId = OrderItemPriceEntity.id
JOIN MenuItemEntity ON OrderItemPriceEntity.menuItemId = MenuItemEntity.id
WHERE OrderItemPriceEntity.orderId = ?;

selectUserOrderItems:
SELECT OrderItemEntity.id, OrderItemEntity.customerId, OrderItemPriceEntity.price,
OrderItemEntity.quantity, MenuItemEntity.name, (OrderItemPriceEntity.price * OrderItemEntity.quantity) AS total
FROM OrderItemEntity
JOIN UserEntity ON OrderItemEntity.customerId = UserEntity.id
JOIN OrderItemPriceEntity ON OrderItemEntity.orderItemPriceId = OrderItemPriceEntity.id
JOIN MenuItemEntity ON OrderItemPriceEntity.menuItemId = MenuItemEntity.id
WHERE OrderItemPriceEntity.orderId = :orderId AND UserEntity.id = :userId;

selectOrderItems:
SELECT OrderItemEntity.id, OrderItemPriceEntity.price,
OrderItemEntity.quantity, MenuItemEntity.name, (OrderItemPriceEntity.price * OrderItemEntity.quantity) AS total
FROM OrderItemEntity
JOIN OrderItemPriceEntity ON OrderItemEntity.orderItemPriceId = OrderItemPriceEntity.id
JOIN MenuItemEntity ON OrderItemPriceEntity.menuItemId = MenuItemEntity.id
WHERE OrderItemPriceEntity.orderId = :orderId;

insertOrderItemPrice:
INSERT OR IGNORE INTO OrderItemPriceEntity(orderId, menuItemId, price, datetime)
VALUES(?, ?, ?, ?);

insertOrderItem:
INSERT OR REPLACE INTO OrderItemEntity(customerId, quantity, orderItemPriceId)
VALUES (?, ?, ?);

selectRestaurantId:
SELECT restaurantId
FROM OrderEntity
WHERE id = ?;

updateOrderItemsPrice:
UPDATE OrderItemPriceEntity
SET price = ?;

selectOrderItemPriceId:
SELECT id
FROM OrderItemPriceEntity
WHERE orderId = :orderId AND menuItemId = :menuItemId;

